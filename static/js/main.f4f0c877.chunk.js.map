{"version":3,"sources":["serviceWorker.ts","actions/QuizIntroduceActions.tsx","actions/EnglishVocaIntroduceActions.tsx","components/EnglishVocaIntroduce/EnglishVocaIntroduce.tsx","shared-components/AnsweringAlerts.tsx","view-models/Choice.tsx","actions/SharedActions.tsx","shared-functions/SharedFunctions.tsx","components/EnglishVocaTest/EnglishVocaTest.tsx","actions/EnglisVocaTestActions.tsx","models/Topic.tsx","constants/UrlConstants.tsx","models/EnglishVocabulary.tsx","shared-functions/guidGenerator.tsx","actions/ApiActions.tsx","components/Home/Home.tsx","actions/HomeActions.tsx","components/QuizIntroduce/QuizIntroduce.tsx","components/QuizTest/QuizTest.tsx","reducers/ApiReducer.tsx","view-models/QuizPart.tsx","reducers/EnglishVocaIntroduceReducer.tsx","view-models/RadioChoices.tsx","reducers/EnglishVocaTestReducer.tsx","reducers/HomeReducer.tsx","reducers/QuizIntroduceReducer.tsx","view-models/CheckBoxChoices.tsx","reducers/QuizTestReducer.tsx","reducers/index.tsx","store/index.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","getTopic","topicId","topics","type","payload","splitQuestionsIntoParts","questions","numberQuestionsPerAPart","mapStateToProps","state","vocabularies","api","englishVocabularies","topicVocabularies","englishVocaIntroduce","parts","numberVocabulariesPerAPart","topic","englishVocaTopics","mapDispatchToProps","getVocabulariesByTopicId","Part","withRouter","connect","collection","iteratee","part","index","key","className","to","pathname","quizPartName","history","useEffect","topicName","topicDescription","AnsweringAlerts","rightAlertMessage","wrongAlertMessage","id","role","Choice","value","isRightAnswer","this","_","isNil","shuffleQuestions","getQuestionByIndex","nextQuestion","resetWhenGoBack","generateChoices","questionContent","choices","confirmAnswer","selectChoice","choice","doTestingPartAgain","displayAnswer","hideButtonConfirm","buttonConfirmElement","document","getElementById","style","display","showButtonConfirm","hideButtonNext","buttonNextElement","showButtonNext","showRightAnswerAlert","rightAnswerAlertElement","showWrongAnswerAlert","wrongAnswerAlertElement","hideRightAnswerAlert","hideWrongAnswerAlert","showButtonDoTestingPartAgain","buttonDoTestingPartAgainElement","showButtonGoBackToTestingPart","buttonGoBackToTestingPartElement","hideButtonDoTestingPartAgain","hideButtonGoBackToTestingPart","speech","Speech","require","default","setLanguage","englishVocaTest","currentVocaIndex","currentVoca","isNextQuestion","isMeaningQuestion","setIsMeaningQuestion","CurrentVoca","speak","text","newText","replacedText","replace","replaceSpecialCharacters","replaceNumberCharacters","cancel","then","console","log","catch","error","random","wrongVocabularies","shuffle","filter","voca","vocabularyId","slice","wrongChoices","rightChoice","meaning","vocabulary","map","_generateChoices","onClick","Form","values","onChange","_selectChoice","disabled","name","htmlFor","goBack","length","selectedChoice","forEach","radioElement","labelForRadioElement","querySelector","classList","add","checked","contains","remove","Topic","parentTopicId","isEnglishVocaTopic","EnglishVocabulary","transliteration","image","S4","Math","toString","substring","guidGenerator","fetchTopicsBegin","fetchTopicsSuccess","fetchTopicsFailure","fetchEnglishVocabulariesBegin","fetchEnglishVocabulariesSuccess","fetchEnglishVocabulariesFailure","getChildTopics","childTopics","hasChildTopics","ChildTopics","introducingPageLink","childTopic","showChildTopicsList","IconDoQuiz","hide","childTopicsList","childTopicsListDisplay","parentTopics","home","englishParentTopics","notEnglishParentTopics","fetchTopics","dispatch","fetch","response","json","responseData","item","push","getEnglishParentTopics","getNotEnglishParentTopics","getParentTopics","fetchVocabularies","ParentTopics","quizIntroduce","topicQuestions","getQuestionsByTopicId","currentQuestionIndex","quizTest","selectedAnswers","currentQuestion","deselectChoice","CurrentQuestion","answers","rightAnswers","includes","e","isNull","target","selectCheckBox","i","selectedChoices","some","notSelectedChoices","difference","checkIfRightAnswers","checkBoxElement","labelForCheckBoxElement","answer","initialState","QuizPart","RadioChoices","CheckBoxChoices","find","c","reducers","combineReducers","action","question","chunk","newQuestions","isChoiceExists","store","createStore","applyMiddleware","thunk","App","path","exact","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f4f0c877.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Topic from '../models/Topic';\r\n\r\nexport const GET_TOPIC = 'GET_TOPIC';\r\nexport const GET_QUESTIONS_BY_TOPIC_ID = 'GET_QUESTIONS_BY_TOPIC_ID';\r\nexport const SPLIT_QUESTIONS_INTO_PARTS = 'SPLIT_QUESTIONS_INTO_PARTS';\r\n\r\nexport const getTopic = (topicId: number, topics: Topic[] = []) => ({\r\n    type: GET_TOPIC,\r\n    payload: {\r\n        topicId,\r\n        topics\r\n    }\r\n});\r\n\r\nexport function getQuestionsByTopicId<T>(topicId: number, questions: T[]) {\r\n    return ({\r\n        type: GET_QUESTIONS_BY_TOPIC_ID,\r\n        payload: {\r\n            topicId,\r\n            questions,\r\n        }\r\n    });\r\n}\r\n\r\nexport function splitQuestionsIntoParts<T>(questions: T[], numberQuestionsPerAPart: number) {\r\n    return ({\r\n        type: SPLIT_QUESTIONS_INTO_PARTS,\r\n        payload: {\r\n            questions,\r\n            numberQuestionsPerAPart\r\n        }\r\n    });\r\n}","export const GET_VOCABULARIES_BY_TOPIC_ID = 'GET_VOCABULARIES_BY_TOPIC_ID';\r\n\r\nexport const getVocabulariesByTopicId = (topicId: Number, vocabularies = []) => ({\r\n    type: GET_VOCABULARIES_BY_TOPIC_ID,\r\n    payload: {\r\n        topicId,\r\n        vocabularies\r\n    }\r\n});","import EnglishVocabulary from '../../models/EnglishVocabulary';\r\nimport QuizPart from '../../view-models/QuizPart';\r\nimport React, { useEffect } from 'react';\r\nimport Topic from '../../models/Topic';\r\nimport { connect } from 'react-redux';\r\nimport { getTopic, splitQuestionsIntoParts } from '../../actions/QuizIntroduceActions';\r\nimport { getVocabulariesByTopicId } from '../../actions/EnglishVocaIntroduceActions';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Map } from 'react-lodash';\r\nimport './EnglishVocaIntroduce.css';\r\n\r\nfunction EnglishVocaIntroduce({\r\n    history: {\r\n        location: {\r\n            state: {\r\n                topicId\r\n            }\r\n        }\r\n    },\r\n    getTopic,\r\n    getVocabulariesByTopicId,\r\n    vocabularies,\r\n    topicVocabularies,\r\n    numberVocabulariesPerAPart,\r\n    splitQuestionsIntoParts,\r\n    topic,\r\n    topics,\r\n}: {\r\n    getTopic: Function,\r\n    getVocabulariesByTopicId: Function,\r\n    vocabularies: EnglishVocabulary[],\r\n    topicVocabularies: EnglishVocabulary[],\r\n    numberVocabulariesPerAPart: Number,\r\n    splitQuestionsIntoParts: Function,\r\n    topic: Topic,\r\n    topics: Topic[],\r\n    history: any,\r\n}) {\r\n    useEffect(() => {\r\n        getTopic(topicId, topics);\r\n        getVocabulariesByTopicId(\r\n            topicId,\r\n            vocabularies\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        splitQuestionsIntoParts(\r\n            topicVocabularies,\r\n            numberVocabulariesPerAPart\r\n        );\r\n    }, [topicVocabularies]);\r\n\r\n    return (\r\n        <div className='English-Voca-Introduce'>\r\n            <div className='card-header'>{topic?.topicName}</div>\r\n            <div className='card-body col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>\r\n                <span className='topic-description col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>{topic?.topicDescription}</span>\r\n                <Part />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _Part({\r\n    parts,\r\n    topic\r\n}: {\r\n    parts: QuizPart<EnglishVocabulary>[],\r\n    topic: Topic\r\n}) {\r\n    return (\r\n        <Map\r\n            collection={parts}\r\n            iteratee={(part: QuizPart<EnglishVocabulary>, index: number) =>\r\n                <Link\r\n                    key={index}\r\n                    className=\"quiz-part btn btn-primary col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\"\r\n                    to={{\r\n                        pathname: '/english-voca-test',\r\n                        state: {\r\n                            topic,\r\n                            part\r\n                        }\r\n                    }}\r\n                >\r\n                    {part.quizPartName}\r\n                </Link>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        vocabularies: state.api.englishVocabularies,\r\n        topicVocabularies: state.englishVocaIntroduce.vocabularies,\r\n        parts: state.englishVocaIntroduce.parts,\r\n        numberVocabulariesPerAPart: state.api.numberVocabulariesPerAPart,\r\n        topic: state.englishVocaIntroduce.topic,\r\n        topics: state.api.englishVocaTopics\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getTopic,\r\n    getVocabulariesByTopicId,\r\n    splitQuestionsIntoParts,\r\n}\r\n\r\nconst Part = withRouter(\r\n    connect(mapStateToProps)(_Part)\r\n);\r\nexport default withRouter(\r\n    connect(mapStateToProps, mapDispatchToProps)(EnglishVocaIntroduce)\r\n)","import React from 'react';\r\n\r\nexport default function AnsweringAlerts({\r\n    rightAlertMessage,\r\n    wrongAlertMessage\r\n}: {\r\n    rightAlertMessage: string,\r\n    wrongAlertMessage: string,\r\n}) {\r\n    return (\r\n        <>\r\n            <div\r\n                id='right-answer-alert'\r\n                className=\"alert alert-success\"\r\n                role=\"alert\"\r\n            >\r\n                {rightAlertMessage}\r\n            </div>\r\n            <div\r\n                id='wrong-answer-alert'\r\n                className=\"alert alert-danger\"\r\n                role=\"alert\"\r\n            >\r\n                {wrongAlertMessage}\r\n            </div>\r\n        </>\r\n    )\r\n}","import _ from 'lodash';\r\n\r\nexport default class Choice {\r\n    index: number = -1;\r\n    value: string;\r\n    isRightAnswer: boolean;\r\n\r\n    constructor({\r\n        index,\r\n        value,\r\n        isRightAnswer\r\n    }: {\r\n        index?: number,\r\n        value: string,\r\n        isRightAnswer: boolean,\r\n    }) {\r\n        this.index = _.isNil(index) ? -1 : index;\r\n        this.value = value || '';\r\n        this.isRightAnswer = isRightAnswer || false;\r\n    }\r\n}","import Choice from '../view-models/Choice';\r\n\r\nexport const SHUFFLE_QUESTIONS = 'SHUFFLE_QUESTIONS';\r\nexport const GET_QUESTION_BY_INDEX = 'GET_QUESTION_BY_INDEX';\r\nexport const NEXT_QUESTION = 'NEXT_QUESTION';\r\nexport const RESET_WHEN_GO_BACK = 'RESET_WHEN_GO_BACK';\r\nexport const GENERATE_CHOICES = 'GENERATE_CHOICES';\r\nexport const CONFIRM_ANSWER = 'CONFIRM_ANSWER';\r\nexport const SELECT_CHOICE = 'SELECT_CHOICE';\r\nexport const DESELECT_CHOICE = 'DESELECT_CHOICE';\r\nexport const DO_TESTING_PART_AGAIN = 'DO_TESTING_PART_AGAIN';\r\n\r\nexport function shuffleQuestions<T>(questions: T[] = []) {\r\n    return ({\r\n        type: SHUFFLE_QUESTIONS,\r\n        payload: {\r\n            questions\r\n        }\r\n    });\r\n}\r\n\r\nexport const getQuestionByIndex = (index: number) => ({\r\n    type: GET_QUESTION_BY_INDEX,\r\n    payload: {\r\n        index\r\n    }\r\n});\r\n\r\nexport const nextQuestion = () => ({\r\n    type: NEXT_QUESTION\r\n});\r\n\r\nexport const resetWhenGoBack = () => ({\r\n    type: RESET_WHEN_GO_BACK\r\n});\r\n\r\nexport const generateChoices = (questionContent: string, choices: Choice[] = []) => ({\r\n    type: GENERATE_CHOICES,\r\n    payload: {\r\n        questionContent,\r\n        choices,\r\n    }\r\n});\r\n\r\nexport const confirmAnswer = (isRightAnswer: boolean) => ({\r\n    type: CONFIRM_ANSWER,\r\n    payload: {\r\n        isRightAnswer\r\n    }\r\n});\r\n\r\nexport const selectChoice = (choice: Choice) => ({\r\n    type: SELECT_CHOICE,\r\n    payload: {\r\n        choice\r\n    }\r\n});\r\n\r\nexport const deselectChoice = (choice: Choice) => ({\r\n    type: DESELECT_CHOICE,\r\n    payload: {\r\n        choice\r\n    }\r\n});\r\n\r\nexport const doTestingPartAgain = () => ({\r\n    type: DO_TESTING_PART_AGAIN\r\n});","import _ from 'lodash';\r\n\r\nexport function displayAnswer(value: any) {\r\n    if (_.isNil(value))\r\n        return 'hidden-answer';\r\n    else return 'visible-answer';\r\n}\r\n\r\nexport function hideButtonConfirm() {\r\n    let buttonConfirmElement = document.getElementById('btn-confirm-answer');\r\n    if (buttonConfirmElement)\r\n        buttonConfirmElement.style.display = 'none';\r\n}\r\n\r\nexport function showButtonConfirm() {\r\n    let buttonConfirmElement = document.getElementById('btn-confirm-answer');\r\n    if (buttonConfirmElement)\r\n        buttonConfirmElement.style.display = 'block';\r\n}\r\n\r\nexport function hideButtonNext() {\r\n    let buttonNextElement = document.getElementById('btn-next-question');\r\n    if (buttonNextElement)\r\n        buttonNextElement.style.display = 'none';\r\n}\r\n\r\nexport function showButtonNext() {\r\n    let buttonNextElement = document.getElementById('btn-next-question');\r\n    if (buttonNextElement)\r\n        buttonNextElement.style.display = 'block';\r\n}\r\n\r\nexport function showRightAnswerAlert() {\r\n    let rightAnswerAlertElement = document.getElementById('right-answer-alert');\r\n    if (rightAnswerAlertElement)\r\n        rightAnswerAlertElement.style.display = 'block';\r\n}\r\n\r\nexport function showWrongAnswerAlert() {\r\n    let wrongAnswerAlertElement = document.getElementById('wrong-answer-alert');\r\n    if (wrongAnswerAlertElement)\r\n        wrongAnswerAlertElement.style.display = 'block';\r\n}\r\n\r\nexport function hideRightAnswerAlert() {\r\n    let rightAnswerAlertElement = document.getElementById('right-answer-alert');\r\n    if (rightAnswerAlertElement)\r\n        rightAnswerAlertElement.style.display = 'none';\r\n}\r\n\r\nexport function hideWrongAnswerAlert() {\r\n    let wrongAnswerAlertElement = document.getElementById('wrong-answer-alert');\r\n    if (wrongAnswerAlertElement)\r\n        wrongAnswerAlertElement.style.display = 'none';\r\n}\r\n\r\nexport function showButtonDoTestingPartAgain() {\r\n    let buttonDoTestingPartAgainElement\r\n        = document.getElementById('btn-do-testing-part-again');\r\n    if (buttonDoTestingPartAgainElement)\r\n        buttonDoTestingPartAgainElement.style.display = 'block';\r\n}\r\n\r\nexport function showButtonGoBackToTestingPart() {\r\n    let buttonGoBackToTestingPartElement\r\n        = document.getElementById('btn-go-back-to-testing-part');\r\n    if (buttonGoBackToTestingPartElement)\r\n        buttonGoBackToTestingPartElement.style.display = 'block';\r\n}\r\n\r\nexport function hideButtonDoTestingPartAgain() {\r\n    let buttonDoTestingPartAgainElement\r\n        = document.getElementById('btn-do-testing-part-again');\r\n    if (buttonDoTestingPartAgainElement)\r\n        buttonDoTestingPartAgainElement.style.display = 'none';\r\n}\r\n\r\nexport function hideButtonGoBackToTestingPart() {\r\n    let buttonGoBackToTestingPartElement\r\n        = document.getElementById('btn-go-back-to-testing-part');\r\n    if (buttonGoBackToTestingPartElement)\r\n        buttonGoBackToTestingPartElement.style.display = 'none';\r\n}\r\n\r\nexport function replaceSpecialCharacters(text: String, replacedText = '') {\r\n    if (_.isNil(text) || _.isNil(replacedText))\r\n        return '';\r\n\r\n    return text.replace(/[&\\/\\\\#,+()$~%.'\":*?<>{}]/g, replacedText);\r\n}\r\n\r\nexport function replaceNumberCharacters(text: String, replacedText = '') {\r\n    if (_.isNil(text) || _.isNil(replacedText))\r\n        return '';\r\n\r\n    return text.replace(/[0-9]/g, replacedText);\r\n}","import _ from 'lodash';\r\nimport AnsweringAlerts from '../../shared-components/AnsweringAlerts';\r\nimport Choice from '../../view-models/Choice';\r\nimport EnglishVocabulary from '../../models/EnglishVocabulary';\r\nimport RadioChoices from '../../view-models/RadioChoices';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    confirmAnswer,\r\n    doTestingPartAgain,\r\n    generateChoices,\r\n    getQuestionByIndex,\r\n    nextQuestion,\r\n    resetWhenGoBack,\r\n    selectChoice,\r\n    shuffleQuestions\r\n    } from '../../actions/SharedActions';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    displayAnswer,\r\n    hideButtonConfirm,\r\n    hideButtonDoTestingPartAgain,\r\n    hideButtonGoBackToTestingPart,\r\n    hideButtonNext,\r\n    hideRightAnswerAlert,\r\n    hideWrongAnswerAlert,\r\n    replaceNumberCharacters,\r\n    replaceSpecialCharacters,\r\n    showButtonConfirm,\r\n    showButtonDoTestingPartAgain,\r\n    showButtonGoBackToTestingPart,\r\n    showButtonNext,\r\n    showRightAnswerAlert,\r\n    showWrongAnswerAlert\r\n    } from '../../shared-functions/SharedFunctions';\r\nimport { Form } from 'react-bootstrap';\r\nimport { Map } from 'react-lodash';\r\nimport { setIsMeaningQuestion } from '../../actions/EnglisVocaTestActions';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './EnglishVocaTest.css';\r\nconst Speech = require('speak-tts').default;\r\nconst speech = new Speech();\r\nspeech.setLanguage('en-US');\r\nfunction EnglishVocaTest({\r\n    history: {\r\n        location: {\r\n            state: {\r\n                topic,\r\n                part\r\n            }\r\n        },\r\n        goBack\r\n    },\r\n    shuffleQuestions,\r\n    getQuestionByIndex,\r\n    currentVocaIndex,\r\n    resetWhenGoBack,\r\n    vocabularies,\r\n    currentVoca,\r\n    doTestingPartAgain,\r\n    choices,\r\n    confirmAnswer,\r\n    nextQuestion,\r\n}: {\r\n    history: any,\r\n    shuffleQuestions: Function,\r\n    getQuestionByIndex: Function,\r\n    currentVocaIndex: number,\r\n    resetWhenGoBack: Function,\r\n    vocabularies: EnglishVocabulary[],\r\n    currentVoca: EnglishVocabulary,\r\n    doTestingPartAgain: Function,\r\n    choices: RadioChoices,\r\n    confirmAnswer: Function,\r\n    nextQuestion: Function,\r\n}) {\r\n    useEffect(() => {\r\n        shuffleQuestions(part?.questions);\r\n        getQuestionByIndex(currentVocaIndex);\r\n\r\n        return () => {\r\n            resetWhenGoBack();\r\n            speech.cancel();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getQuestionByIndex(currentVocaIndex);\r\n    }, [currentVocaIndex]);\r\n\r\n    useEffect(() => {\r\n        if (isTestingPartDone()) {\r\n            showButtonDoTestingPartAgain();\r\n            showButtonGoBackToTestingPart();\r\n            hideButtonNext();\r\n            hideButtonConfirm();\r\n        }\r\n    }, [currentVoca]);\r\n\r\n    function isTestingPartDone() {\r\n        return vocabularies.length > 0\r\n            && currentVocaIndex >= vocabularies.length;\r\n    }\r\n\r\n    function _doTestingPartAgain() {\r\n        doTestingPartAgain();\r\n\r\n        hideButtonDoTestingPartAgain();\r\n        hideButtonGoBackToTestingPart();\r\n        showButtonConfirm();\r\n    }\r\n\r\n    function resetAllRadioButtons() {\r\n        choices.values.forEach((choice: Choice, index: number) => {\r\n            let radioElement = document.getElementById(`answer-${index}`) as HTMLInputElement;\r\n            let labelForRadioElement = document.querySelector(`label[for='answer-${index}']`)\r\n            if (_.isNil(radioElement) || _.isNil(labelForRadioElement))\r\n                return;\r\n\r\n            radioElement.checked = false;\r\n            if (radioElement.classList.contains('wrong-answer'))\r\n                radioElement.classList.remove('wrong-answer');\r\n            if (radioElement.classList.contains('right-answer'))\r\n                radioElement.classList.remove('right-answer');\r\n            if (labelForRadioElement.classList.contains('wrong-answer'))\r\n                labelForRadioElement.classList.remove('wrong-answer');\r\n            if (labelForRadioElement.classList.contains('right-answer'))\r\n                labelForRadioElement.classList.remove('right-answer');\r\n        });\r\n    }\r\n\r\n    function confirm() {\r\n        if (choices.selectedChoice) {\r\n            confirmAnswer(choices.selectedChoice.isRightAnswer);\r\n            showRightAnswers();\r\n        }\r\n    }\r\n\r\n    function showRightAnswers() {\r\n        choices.values.forEach((choice: Choice, index: number) => {\r\n            let radioElement = document.getElementById(`answer-${index}`);\r\n            let labelForRadioElement = document.querySelector(`label[for='answer-${index}']`)\r\n            if (_.isNil(radioElement) || _.isNil(labelForRadioElement))\r\n                return;\r\n\r\n            if (choice.isRightAnswer) {\r\n                radioElement.classList.add('right-answer');\r\n                labelForRadioElement.classList.add('right-answer');\r\n            } else {\r\n                if (choices.selectedChoice\r\n                    && choice.index === choices.selectedChoice.index) {\r\n                    radioElement.classList.add('wrong-answer');\r\n                    labelForRadioElement.classList.add('wrong-answer');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function _nextQuestion() {\r\n        resetAllRadioButtons();\r\n        hideWrongAnswerAlert();\r\n        hideRightAnswerAlert();\r\n        showButtonConfirm();\r\n        hideButtonNext();\r\n        nextQuestion();\r\n        speech.cancel();\r\n    }\r\n\r\n    return (\r\n        <div className='English-Voca-Test'>\r\n            <div className='card-header'>\r\n                <span>{topic?.topicName}</span>\r\n                <span>></span>\r\n                <span>{part?.quizPartName}</span>\r\n            </div>\r\n            <div className='card-body col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>\r\n                <AnsweringAlerts\r\n                    rightAlertMessage='Bạn trả lời đúng rồi, tốt lắm :)'\r\n                    wrongAlertMessage='Bạn trả lời sai rồi, cố gắng chục lần sau nha :)'\r\n                />\r\n                <CurrentVoca />\r\n                <button\r\n                    id='btn-confirm-answer'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={confirm}\r\n                    disabled={_.isNil(choices.selectedChoice)}\r\n                >\r\n                    Chọn\r\n                </button>\r\n                <button\r\n                    id='btn-next-question'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={_nextQuestion}\r\n                >\r\n                    Tiếp\r\n                </button>\r\n                <button\r\n                    id='btn-do-testing-part-again'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={_doTestingPartAgain}\r\n                >\r\n                    Học lại\r\n                </button>\r\n                <button\r\n                    id='btn-go-back-to-testing-part'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={goBack}\r\n                >\r\n                    Trở lại\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _CurrentVoca({\r\n    currentVoca,\r\n    currentVocaIndex,\r\n    isRightAnswer,\r\n    isNextQuestion,\r\n    choices,\r\n    generateChoices,\r\n    vocabularies,\r\n    selectChoice,\r\n    isMeaningQuestion,\r\n    setIsMeaningQuestion,\r\n}: {\r\n    currentVoca: EnglishVocabulary,\r\n    currentVocaIndex: number,\r\n    isRightAnswer: boolean,\r\n    isNextQuestion: boolean,\r\n    choices: RadioChoices,\r\n    generateChoices: Function,\r\n    vocabularies: EnglishVocabulary[],\r\n    selectChoice: Function,\r\n    isMeaningQuestion: boolean,\r\n    setIsMeaningQuestion: Function,\r\n}) {\r\n    useEffect(() => {\r\n        setIsMeaningQuestion(_.random(0, 1));\r\n    }, [currentVoca]);\r\n\r\n    function _generateChoices() {\r\n        if (_.isNil(vocabularies)\r\n            || _.isNil(currentVoca)\r\n            || _.isNil(isMeaningQuestion))\r\n            return;\r\n\r\n        let shuffleVocabularies = _.shuffle(vocabularies.filter((voca: EnglishVocabulary) => voca?.vocabularyId !== currentVoca.vocabularyId));\r\n        let wrongVocabularies = shuffleVocabularies.slice(0, 3);\r\n        let wrongChoices = [];\r\n        let rightChoice = '';\r\n        let questionContent = '';\r\n\r\n        if (isMeaningQuestion) {\r\n            questionContent = currentVoca?.meaning;\r\n            rightChoice = currentVoca?.vocabulary;\r\n            wrongChoices = wrongVocabularies.map((voca: EnglishVocabulary) => voca.vocabulary);\r\n        } else {\r\n            questionContent = currentVoca.vocabulary;\r\n            rightChoice = currentVoca.meaning;\r\n            wrongChoices = wrongVocabularies.map((voca: EnglishVocabulary) => voca.meaning);\r\n        }\r\n        let choices = [rightChoice, ...wrongChoices].map((value: string, index: number) =>\r\n            new Choice({ value, isRightAnswer: index === 0 })\r\n        );\r\n\r\n        generateChoices(questionContent, choices);\r\n    }\r\n\r\n    useEffect(() => {\r\n        _generateChoices();\r\n    }, [isMeaningQuestion]);\r\n\r\n    useEffect(() => {\r\n        if (_.isNil(isRightAnswer))\r\n            return;\r\n\r\n        if (isRightAnswer) {\r\n            showRightAnswerAlert();\r\n            hideWrongAnswerAlert();\r\n        } else {\r\n            hideRightAnswerAlert();\r\n            showWrongAnswerAlert();\r\n        }\r\n\r\n        hideButtonConfirm();\r\n        showButtonNext();\r\n    }, [isRightAnswer]);\r\n\r\n    function _selectChoice(choice: Choice) {\r\n        if (_.isNil(choice))\r\n            return;\r\n\r\n        selectChoice(choice);\r\n        if (isMeaningQuestion)\r\n            speak(choice.value);\r\n    }\r\n\r\n    function speak(text: String) {\r\n        let newText = replaceSpecialCharacters(replaceNumberCharacters(text));\r\n        if (newText === '')\r\n            return;\r\n\r\n        speech.cancel();\r\n        speech.speak({\r\n            text: newText\r\n        }).then(() => console.log('success'))\r\n            .catch((error: Error) => console.error(\"An error occurred :\", error));\r\n    }\r\n\r\n    if (_.isNil(currentVoca))\r\n        return null;\r\n\r\n    return (\r\n        <div className='current-question'>\r\n            <span onClick={() => {\r\n                if (!isMeaningQuestion)\r\n                    speak(choices.questionContent)\r\n            }}>\r\n                <b>Câu {currentVocaIndex + 1}: </b>\r\n                <span>{choices?.questionContent}</span>\r\n            </span>\r\n            <Form>\r\n                <Map\r\n                    collection={choices.values}\r\n                    iteratee={(choice: Choice, index: number) =>\r\n                        <div\r\n                            key={index}\r\n                            className={`${displayAnswer(choice.value)} custom-control custom-radio custom-control-inline`}\r\n                        >\r\n                            <input\r\n                                id={`answer-${index}`}\r\n                                type='radio'\r\n                                className='custom-control-input'\r\n                                onChange={() => _selectChoice(choice)}\r\n                                disabled={isNextQuestion}\r\n                                name='radio'\r\n                            />\r\n                            <label\r\n                                className='custom-control-label'\r\n                                htmlFor={`answer-${index}`}\r\n                            >\r\n                                {choice.value}\r\n                            </label>\r\n                        </div>\r\n                    }\r\n                />\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        vocabularies: state.englishVocaTest.vocabularies,\r\n        currentVocaIndex: state.englishVocaTest.currentVocaIndex,\r\n        choices: state.englishVocaTest.choices,\r\n        currentVoca: state.englishVocaTest.currentVoca,\r\n        isNextQuestion: state.englishVocaTest.isNextQuestion,\r\n        isRightAnswer: state.englishVocaTest.isRightAnswer,\r\n        isMeaningQuestion: state.englishVocaTest.isMeaningQuestion,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    shuffleQuestions,\r\n    getQuestionByIndex,\r\n    nextQuestion,\r\n    resetWhenGoBack,\r\n    generateChoices,\r\n    selectChoice,\r\n    confirmAnswer,\r\n    doTestingPartAgain,\r\n    setIsMeaningQuestion,\r\n}\r\n\r\nconst CurrentVoca = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(_CurrentVoca);\r\nexport default withRouter(\r\n    connect(mapStateToProps, mapDispatchToProps)(EnglishVocaTest)\r\n);","export const SET_IS_MEANING_QUESTION = 'SET_IS_MEANING_QUESTION';\r\n\r\nexport const setIsMeaningQuestion = (isMeaningQuestion: boolean) => ({\r\n    type: SET_IS_MEANING_QUESTION,\r\n    payload: {\r\n        isMeaningQuestion\r\n    }\r\n})","export default class Topic {\r\n    topicId: number;\r\n    topicName: string;\r\n    topicDescription: string;\r\n    parentTopicId?: number | null;\r\n    isEnglishVocaTopic: boolean;\r\n\r\n    constructor({\r\n        topicId,\r\n        topicName,\r\n        topicDescription,\r\n        parentTopicId,\r\n        isEnglishVocaTopic\r\n    }: {\r\n        topicId: number,\r\n        topicName: string,\r\n        topicDescription: string,\r\n        parentTopicId?: number | null,\r\n        isEnglishVocaTopic: boolean\r\n    }) {\r\n        this.topicId = topicId;\r\n        this.topicName = topicName;\r\n        this.topicDescription = topicDescription;\r\n        this.parentTopicId = parentTopicId;\r\n        this.isEnglishVocaTopic = isEnglishVocaTopic;\r\n    }\r\n}","export const TOPICS_BASE_URL = '/api/topics';\r\nexport const PARENT_TOPICS_URL = `${TOPICS_BASE_URL}/get-parent-topics`;\r\nexport const CHILD_TOPICS_URL = `${TOPICS_BASE_URL}/get-child-topics`;\r\nexport const ENGLISH_VOCABULARIES_BASE_URL = '/api/englishVocabularies';","import guidGenerator from \"../shared-functions/guidGenerator\";\r\n\r\nexport default class EnglishVocabulary {\r\n    vocabularyId: string | number;\r\n    vocabulary: string;\r\n    transliteration?: string;\r\n    meaning: string;\r\n    image?: string;\r\n    topicId: number;\r\n\r\n    constructor({\r\n        vocabulary,\r\n        transliteration,\r\n        meaning,\r\n        image,\r\n        topicId\r\n    }: {\r\n        vocabulary: string,\r\n        transliteration?: string,\r\n        meaning: string,\r\n        image?: string,\r\n        topicId: number,\r\n    }) {\r\n        this.vocabularyId = guidGenerator();\r\n        this.vocabulary = vocabulary;\r\n        this.transliteration = transliteration;\r\n        this.meaning = meaning;\r\n        this.image = image;\r\n        this.topicId = topicId;\r\n    }\r\n}","export default function guidGenerator() {\r\n    var S4 = function() {\r\n       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n    };\r\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n}","import Topic from '../models/Topic';\r\nimport { TOPICS_BASE_URL, ENGLISH_VOCABULARIES_BASE_URL } from '../constants/UrlConstants';\r\nimport IAction from '../interfaces/IAction';\r\nimport EnglishVocabulary from '../models/EnglishVocabulary';\r\n\r\nexport const FETCH_TOPICS_SUCCESS = 'FETCH_TOPICS_SUCCESS';\r\nexport const FETCH_TOPICS_FAILURE = 'FETCH_TOPICS_FAILURE';\r\nexport const FETCH_TOPICS_BEGIN = 'FETCH_TOPICS_BEGIN';\r\n\r\nexport const FETCH_ENGLISH_VOCABULARIES_SUCCESS = 'FETCH_ENGLISH_VOCABULARIES_SUCCESS';\r\nexport const FETCH_ENGLISH_VOCABULARIES_FAILURE = 'FETCH_ENGLISH_VOCABULARIES_FAILURE';\r\nexport const FETCH_ENGLISH_VOCABULARIES_BEGIN = 'FETCH_ENGLISH_VOCABULARIES_BEGIN';\r\n\r\nexport const fetchTopics = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(fetchTopicsBegin());\r\n        return fetch(TOPICS_BASE_URL)\r\n            .then((response: Response) => response.json())\r\n            .then((responseData: Array<any>) => {\r\n                let topics: Topic[] = [];\r\n                for (let item of responseData) {\r\n                    topics.push(new Topic(item));\r\n                }\r\n                dispatch(fetchTopicsSuccess(topics));\r\n            }).catch((error: Error) => {\r\n                dispatch(fetchTopicsFailure(error));\r\n                return error;\r\n            });\r\n    }\r\n}\r\n\r\nconst fetchTopicsBegin = (): IAction => ({\r\n    type: FETCH_TOPICS_BEGIN\r\n});\r\n\r\nconst fetchTopicsSuccess = (topics: Topic[]): IAction => ({\r\n    type: FETCH_TOPICS_SUCCESS,\r\n    payload: {\r\n        topics\r\n    }\r\n});\r\n\r\nconst fetchTopicsFailure = (error: Error): IAction => ({\r\n    type: FETCH_TOPICS_FAILURE,\r\n    payload: {\r\n        error\r\n    }\r\n});\r\n\r\nexport const fetchVocabularies = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(fetchEnglishVocabulariesBegin());\r\n        return fetch(ENGLISH_VOCABULARIES_BASE_URL)\r\n            .then((response: Response) => response.json())\r\n            .then((responseData: Array<any>) => {\r\n                let vocabularies: EnglishVocabulary[] = [];\r\n                for (let item of responseData) {\r\n                    vocabularies.push(new EnglishVocabulary(item));\r\n                }\r\n                dispatch(fetchEnglishVocabulariesSuccess(vocabularies));\r\n            }).catch((error: Error) => {\r\n                dispatch(fetchEnglishVocabulariesFailure(error));\r\n                return error;\r\n            });\r\n    }\r\n}\r\n\r\nconst fetchEnglishVocabulariesBegin = (): IAction => ({\r\n    type: FETCH_ENGLISH_VOCABULARIES_BEGIN\r\n});\r\n\r\nconst fetchEnglishVocabulariesSuccess = (vocabularies: EnglishVocabulary[]): IAction => ({\r\n    type: FETCH_ENGLISH_VOCABULARIES_SUCCESS,\r\n    payload: {\r\n        vocabularies\r\n    }\r\n});\r\n\r\nconst fetchEnglishVocabulariesFailure = (error: Error): IAction => ({\r\n    type: FETCH_ENGLISH_VOCABULARIES_FAILURE,\r\n    payload: {\r\n        error\r\n    }\r\n});","import _ from 'lodash';\r\nimport React, { useEffect } from 'react';\r\nimport Topic from '../../models/Topic';\r\nimport { connect } from 'react-redux';\r\nimport { fetchTopics, fetchVocabularies } from '../../actions/ApiActions';\r\nimport { getEnglishParentTopics, getNotEnglishParentTopics, getParentTopics } from '../../actions/HomeActions';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Map } from 'react-lodash';\r\nimport './Home.css';\r\n\r\nfunction Home({\r\n    topics,\r\n    getEnglishParentTopics,\r\n    getNotEnglishParentTopics,\r\n    englishParentTopics,\r\n    notEnglishParentTopics,\r\n    getParentTopics,\r\n    parentTopics,\r\n    fetchTopics,\r\n    fetchVocabularies\r\n}: {\r\n    fetchTopics: Function,\r\n    getEnglishParentTopics: Function,\r\n    getNotEnglishParentTopics: Function,\r\n    getParentTopics: Function,\r\n    fetchVocabularies: Function,\r\n    topics: Topic[],\r\n    englishParentTopics: Topic[],\r\n    notEnglishParentTopics: Topic[],\r\n    parentTopics: Topic[],\r\n}) {\r\n    useEffect(() => {\r\n        fetchTopics();\r\n        fetchVocabularies();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getParentTopics(topics);\r\n    }, [topics]);\r\n\r\n    useEffect(() => {\r\n        getEnglishParentTopics();\r\n        getNotEnglishParentTopics();\r\n    }, [parentTopics]);\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <ul className='list-group'>\r\n                <li className='list-group-item list-group-item-primary'>Chủ đề</li>\r\n                <Map\r\n                    collection={englishParentTopics}\r\n                    iteratee={(topic: Topic, key: number) =>\r\n                        <ParentTopics\r\n                            key={key}\r\n                            topic={topic}\r\n                            introducingPageLink={'/english-voca-introduce'}\r\n                        />\r\n                    }\r\n                />\r\n                <Map\r\n                    collection={notEnglishParentTopics}\r\n                    iteratee={(topic: Topic, key: number) =>\r\n                        <ParentTopics\r\n                            key={key}\r\n                            topic={topic}\r\n                            introducingPageLink={'/quiz-introduce'}\r\n                        />\r\n                    }\r\n                />\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getChildTopics(parentTopicId: Number, topics: Topic[] = []): Topic[] {\r\n    const childTopics = topics.filter((topic: Topic) => topic.parentTopicId === parentTopicId);\r\n    return childTopics;\r\n}\r\n\r\nfunction hasChildTopics(parentTopicId: Number, topics: Topic[] = []): boolean {\r\n    return getChildTopics(parentTopicId, topics).length > 0;\r\n}\r\n\r\nfunction _ParentTopics({\r\n    topic,\r\n    topics,\r\n    introducingPageLink\r\n}: {\r\n    topic: Topic,\r\n    topics: Topic[],\r\n    introducingPageLink: string,\r\n}) {\r\n    return (\r\n        <>\r\n            <li\r\n                className='list-group-item list-group-item-action'\r\n                onClick={() => showChildTopicsList(topic.topicId)}>\r\n                {topic.topicName}\r\n                <IconDoQuiz\r\n                    topicId={topic.topicId}\r\n                    hide={hasChildTopics(topic.topicId, topics)}\r\n                    introducingPageLink={introducingPageLink}\r\n                />\r\n            </li>\r\n            <ChildTopics\r\n                parentTopicId={topic.topicId}\r\n                topics={topics}\r\n                introducingPageLink={introducingPageLink}\r\n            />\r\n        </>)\r\n}\r\n\r\nfunction ChildTopics({\r\n    topics,\r\n    parentTopicId,\r\n    introducingPageLink\r\n}: {\r\n    topics: Topic[],\r\n    parentTopicId: number,\r\n    introducingPageLink: string,\r\n}) {\r\n    return (\r\n        <ul id={`child-topics-${parentTopicId}`}>\r\n            <Map\r\n                collection={getChildTopics(parentTopicId, topics)}\r\n                iteratee={(childTopic: Topic, key: number) =>\r\n                    <div key={key}>\r\n                        <li\r\n                            className='list-group-item list-group-item-action'\r\n                            onClick={() => showChildTopicsList(childTopic.topicId)}>\r\n                            {childTopic.topicName}\r\n                            <IconDoQuiz\r\n                                topicId={childTopic.topicId}\r\n                                hide={hasChildTopics(childTopic.topicId, topics)}\r\n                                introducingPageLink={introducingPageLink}\r\n                            />\r\n                        </li>\r\n                        {\r\n                            hasChildTopics(childTopic.topicId, topics)\r\n                            && <ChildTopics\r\n                                    topics={topics}\r\n                                    parentTopicId={childTopic.topicId}\r\n                                    introducingPageLink={introducingPageLink}\r\n                                />\r\n                        }\r\n                    </div>\r\n                }\r\n            />\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction IconDoQuiz({\r\n    topicId,\r\n    hide,\r\n    introducingPageLink\r\n}: {\r\n    topicId: number,\r\n    hide: boolean,\r\n    introducingPageLink: string,\r\n}) {\r\n    if (hide || _.isNil(introducingPageLink))\r\n        return null;\r\n\r\n    return (<Link\r\n            to={{\r\n                pathname: introducingPageLink,\r\n                state: {\r\n                    topicId\r\n                }\r\n            }}>\r\n            <i className='fa fa-book'></i>\r\n        </Link>\r\n    )\r\n}\r\n\r\nfunction showChildTopicsList(topicId: Number) {\r\n    let childTopicsList = document.getElementById(`child-topics-${topicId}`);\r\n    if (childTopicsList) {\r\n        let childTopicsListDisplay = childTopicsList.style.display;\r\n        if (!childTopicsListDisplay\r\n            || childTopicsListDisplay === 'none') {\r\n            childTopicsList.style.display = 'block';\r\n        } else {\r\n            childTopicsList.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        topics: state.api.topics,\r\n        parentTopics: state.home.parentTopics,\r\n        englishParentTopics: state.home.englishParentTopics,\r\n        notEnglishParentTopics: state.home.notEnglishParentTopics,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    fetchTopics,\r\n    getEnglishParentTopics,\r\n    getNotEnglishParentTopics,\r\n    getParentTopics,\r\n    fetchVocabularies,\r\n}\r\n\r\nconst ParentTopics = connect(mapStateToProps)(_ParentTopics);\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));","import IAction from '../interfaces/IAction';\r\nimport Topic from '../models/Topic';\r\n\r\nexport const GET_PARENT_TOPICS = 'GET_PARENT_TOPICS';\r\nexport const GET_ENGLISH_PARENT_TOPICS = 'GET_ENGLISH_PARENT_TOPICS';\r\nexport const GET_NOT_ENGLISH_PARENT_TOPICS = 'GET_NOT_ENGLISH_PARENT_TOPICS';\r\n\r\nexport const getParentTopics = (topics: Topic[]): IAction => ({\r\n    type: GET_PARENT_TOPICS,\r\n    payload: {\r\n        topics\r\n    }\r\n});\r\n\r\nexport const getEnglishParentTopics = (): IAction => ({\r\n    type: GET_ENGLISH_PARENT_TOPICS\r\n});\r\n\r\nexport const getNotEnglishParentTopics = (): IAction => ({\r\n    type: GET_NOT_ENGLISH_PARENT_TOPICS\r\n});","import Question from '../../models/Question';\r\nimport QuizPart from '../../view-models/QuizPart';\r\nimport React, { useEffect } from 'react';\r\nimport Topic from '../../models/Topic';\r\nimport { connect } from 'react-redux';\r\nimport { getQuestionsByTopicId, getTopic, splitQuestionsIntoParts } from '../../actions/QuizIntroduceActions';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Map } from 'react-lodash';\r\nimport './QuizIntroduce.css';\r\n\r\nfunction QuizIntroduce({\r\n    history: {\r\n        location: {\r\n            state: {\r\n                topicId\r\n            }\r\n        }\r\n    },\r\n    getTopic,\r\n    getQuestionsByTopicId,\r\n    splitQuestionsIntoParts,\r\n    topics,\r\n    questions,\r\n    topicQuestions,\r\n    numberQuestionsPerAPart,\r\n    topic\r\n}: {\r\n    history: any,\r\n    getTopic: Function,\r\n    getQuestionsByTopicId: Function,\r\n    splitQuestionsIntoParts: Function,\r\n    topics: Topic[],\r\n    questions: Question[],\r\n    topicQuestions: Question[],\r\n    numberQuestionsPerAPart: number,\r\n    topic: Topic,\r\n}) {\r\n    useEffect(() => {\r\n        getTopic(topicId, topics);\r\n        getQuestionsByTopicId(\r\n            topicId,\r\n            questions\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        splitQuestionsIntoParts(\r\n            topicQuestions,\r\n            numberQuestionsPerAPart\r\n        );\r\n    }, [topicQuestions]);\r\n\r\n    return (\r\n        <div className='Quiz-Introduce'>\r\n            <div className='card-header'>{topic?.topicName}</div>\r\n            <div className='card-body col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>\r\n                <span className='topic-description col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>{topic?.topicDescription}</span>\r\n                <Part />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _Part({\r\n    parts,\r\n    topic\r\n}: {\r\n    parts: QuizPart<Question>[],\r\n    topic: Topic,\r\n}) {\r\n    return (\r\n        <Map\r\n            collection={parts}\r\n            iteratee={(part: QuizPart<Question>, index: number) =>\r\n                <Link\r\n                    key={index}\r\n                    className=\"quiz-part btn btn-primary col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\"\r\n                    to={{\r\n                        pathname: '/quiz-test',\r\n                        state: {\r\n                            topic,\r\n                            part\r\n                        }\r\n                    }}\r\n                >\r\n                    {part.quizPartName}\r\n                </Link>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        topics: state.api.topics,\r\n        topic: state.quizIntroduce.topic,\r\n        numberQuestionsPerAPart: state.api.numberQuestionsPerAPart,\r\n        questions: state.api.questions,\r\n        topicQuestions: state.quizIntroduce.questions,\r\n        parts: state.quizIntroduce.parts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getTopic,\r\n    getQuestionsByTopicId,\r\n    splitQuestionsIntoParts\r\n}\r\n\r\nconst Part = withRouter(\r\n    connect(mapStateToProps)(_Part)\r\n);\r\nexport default withRouter(\r\n    connect(mapStateToProps, mapDispatchToProps)(QuizIntroduce)\r\n);","import _ from 'lodash';\r\nimport AnsweringAlerts from '../../shared-components/AnsweringAlerts';\r\nimport CheckBoxChoices from '../../view-models/CheckBoxChoices';\r\nimport Choice from '../../view-models/Choice';\r\nimport Question from '../../models/Question';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n    confirmAnswer,\r\n    deselectChoice,\r\n    doTestingPartAgain,\r\n    generateChoices,\r\n    getQuestionByIndex,\r\n    nextQuestion,\r\n    resetWhenGoBack,\r\n    selectChoice,\r\n    shuffleQuestions\r\n    } from '../../actions/SharedActions';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    displayAnswer,\r\n    hideButtonConfirm,\r\n    hideButtonDoTestingPartAgain,\r\n    hideButtonGoBackToTestingPart,\r\n    hideButtonNext,\r\n    hideRightAnswerAlert,\r\n    hideWrongAnswerAlert,\r\n    showButtonConfirm,\r\n    showButtonDoTestingPartAgain,\r\n    showButtonGoBackToTestingPart,\r\n    showButtonNext,\r\n    showRightAnswerAlert,\r\n    showWrongAnswerAlert\r\n    } from '../../shared-functions/SharedFunctions';\r\nimport { Map } from 'react-lodash';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './QuizTest.css';\r\n\r\nfunction QuizTest({\r\n    history: {\r\n        location: {\r\n            state: {\r\n                topic,\r\n                part\r\n            }\r\n        },\r\n        goBack\r\n    },\r\n    shuffleQuestions,\r\n    getQuestionByIndex,\r\n    currentQuestionIndex,\r\n    resetWhenGoBack,\r\n    currentQuestion,\r\n    questions,\r\n    doTestingPartAgain,\r\n    choices,\r\n    confirmAnswer,\r\n    nextQuestion,\r\n}: {\r\n    history: any,\r\n    shuffleQuestions: Function,\r\n    getQuestionByIndex: Function,\r\n    resetWhenGoBack: Function,\r\n    doTestingPartAgain: Function,\r\n    confirmAnswer: Function,\r\n    nextQuestion: Function,\r\n    currentQuestionIndex: number,\r\n    currentQuestion: Question,\r\n    questions: Question[],\r\n    choices: CheckBoxChoices,\r\n}) {\r\n    useEffect(() => {\r\n        shuffleQuestions(part?.questions);\r\n        getQuestionByIndex(currentQuestionIndex);\r\n\r\n        return () => resetWhenGoBack();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getQuestionByIndex(currentQuestionIndex);\r\n    }, [currentQuestionIndex]);\r\n\r\n    useEffect(() => {\r\n        if (isTestingPartDone()) {\r\n            showButtonDoTestingPartAgain();\r\n            showButtonGoBackToTestingPart();\r\n            hideButtonConfirm();\r\n            hideButtonNext();\r\n        }\r\n    }, [currentQuestion]);\r\n\r\n    function isTestingPartDone() {\r\n        return questions.length > 0\r\n            && currentQuestionIndex >= questions.length;\r\n    }\r\n\r\n    function _doTestingPartAgain() {\r\n        doTestingPartAgain();\r\n\r\n        hideButtonDoTestingPartAgain();\r\n        hideButtonGoBackToTestingPart();\r\n        showButtonConfirm();\r\n    }\r\n\r\n    function confirm() {\r\n        confirmAnswer(checkIfRightAnswers());\r\n        showRightAnswers();\r\n    }\r\n\r\n    function showRightAnswers() {\r\n        choices.values.forEach((choice: Choice, index: number) => {\r\n            let checkBoxElement = document.getElementById(`answer-${index}`) as HTMLInputElement;\r\n            let labelForCheckBoxElement = document.querySelector(`label[for='answer-${index}']`);\r\n\r\n            if (_.isNil(checkBoxElement)\r\n                || _.isNil(labelForCheckBoxElement))\r\n                return;\r\n\r\n            if (choice.isRightAnswer) {\r\n                checkBoxElement.classList.add('right-answer');\r\n                labelForCheckBoxElement.classList.add('right-answer');\r\n            } else {\r\n                if (checkBoxElement.checked) {\r\n                    checkBoxElement.classList.add('wrong-answer');\r\n                    labelForCheckBoxElement.classList.add('wrong-answer');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function resetAllCheckboxes() {\r\n        currentQuestion.answers.forEach((answer: String, index: Number) => {\r\n            let checkBoxElement = document.getElementById(`answer-${index}`) as HTMLInputElement;\r\n            let labelForCheckBoxElement = document.querySelector(`label[for='answer-${index}']`)\r\n            if (_.isNil(checkBoxElement) || _.isNil(labelForCheckBoxElement))\r\n                return;\r\n\r\n            checkBoxElement.checked = false;\r\n            if (checkBoxElement.classList.contains('wrong-answer')) {\r\n                checkBoxElement.classList.remove('wrong-answer');\r\n                labelForCheckBoxElement.classList.remove('wrong-answer');\r\n            }\r\n            if (checkBoxElement.classList.contains('right-answer')) {\r\n                checkBoxElement.classList.remove('right-answer');\r\n                labelForCheckBoxElement.classList.remove('right-answer');\r\n            }\r\n        });\r\n    }\r\n\r\n    function checkIfRightAnswers() {\r\n        for (let i = 0; i < choices.selectedChoices.length; i++) {\r\n            let choice: Choice = choices.selectedChoices[i];\r\n            if (!choice.isRightAnswer)\r\n                return false;\r\n        }\r\n\r\n        let allSelectedChoicesAreRight\r\n            = _.some(choices.selectedChoices,\r\n                (choice: Choice) => choice.isRightAnswer\r\n            );\r\n\r\n        if (!allSelectedChoicesAreRight)\r\n            return false;\r\n\r\n        let notSelectedChoices = _.difference(choices.values, choices.selectedChoices);\r\n        let allNotSelectedChoicesAreWrong\r\n            = _.some(notSelectedChoices,\r\n                (choice: Choice) => !choice.isRightAnswer\r\n            );\r\n\r\n        return allNotSelectedChoicesAreWrong;\r\n    }\r\n\r\n    function next() {\r\n        resetAllCheckboxes();\r\n        hideWrongAnswerAlert();\r\n        hideRightAnswerAlert();\r\n        showButtonConfirm();\r\n        hideButtonNext();\r\n        nextQuestion();\r\n    }\r\n\r\n    return (\r\n        <div className='Quiz-Test'>\r\n            <div className='card-header'>\r\n                <span>{topic?.topicName}</span>\r\n                <span>></span>\r\n                <span>{part?.quizPartName}</span>\r\n            </div>\r\n            <div className='card-body col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12'>\r\n                <AnsweringAlerts\r\n                    rightAlertMessage='Bạn trả lời đúng rồi, tốt lắm :)'\r\n                    wrongAlertMessage='Bạn trả lời sai rồi, cố gắng chục lần sau nha :)'\r\n                />\r\n                <CurrentQuestion />\r\n                <button\r\n                    id='btn-confirm-answer'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={confirm}\r\n                    disabled={choices.selectedChoices.length === 0}\r\n                >\r\n                    Chọn\r\n                </button>\r\n                <button\r\n                    id='btn-next-question'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={next}\r\n                >\r\n                    Tiếp\r\n                </button>\r\n                <button\r\n                    id='btn-do-testing-part-again'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={_doTestingPartAgain}\r\n                >\r\n                    Học lại\r\n                </button>\r\n                <button\r\n                    id='btn-go-back-to-testing-part'\r\n                    type='submit'\r\n                    className='btn btn-primary'\r\n                    onClick={goBack}\r\n                >\r\n                    Trở lại\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction _CurrentQuestion({\r\n    currentQuestion,\r\n    selectChoice,\r\n    deselectChoice,\r\n    currentQuestionIndex,\r\n    isRightAnswer,\r\n    isNextQuestion,\r\n    choices,\r\n    generateChoices,\r\n}: {\r\n    selectChoice: Function,\r\n    deselectChoice: Function,\r\n    generateChoices: Function,\r\n    currentQuestion: Question,\r\n    currentQuestionIndex: number,\r\n    isRightAnswer: boolean,\r\n    isNextQuestion: boolean,\r\n    choices: CheckBoxChoices,\r\n}) {\r\n    function _generateChoices() {\r\n        if (_.isNil(currentQuestion))\r\n            return;\r\n\r\n        let questionContent = currentQuestion.questionContent;\r\n        let choices = currentQuestion.answers.map((value: string, index: number) =>\r\n            new Choice({\r\n                value,\r\n                isRightAnswer: currentQuestion.rightAnswers.includes(`${index + 1}`)\r\n            })\r\n        );\r\n\r\n        generateChoices(questionContent, choices);\r\n    }\r\n\r\n    useEffect(() => {\r\n        _generateChoices();\r\n    }, [currentQuestion]);\r\n\r\n    function selectCheckBox(e: React.ChangeEvent<HTMLInputElement>, choice: Choice) {\r\n        if (_.isNull(choice))\r\n            return;\r\n\r\n        let checked = e.target.checked;\r\n        if (checked)\r\n            selectChoice(choice);\r\n        else deselectChoice(choice);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (_.isNil(isRightAnswer))\r\n            return;\r\n\r\n        if (isRightAnswer) {\r\n            showRightAnswerAlert();\r\n            hideWrongAnswerAlert();\r\n        } else {\r\n            hideRightAnswerAlert();\r\n            showWrongAnswerAlert();\r\n        }\r\n        hideButtonConfirm();\r\n        showButtonNext();\r\n    }, [isRightAnswer]);\r\n\r\n    if (_.isNil(currentQuestion))\r\n        return null;\r\n\r\n    return (\r\n        <div className='current-question'>\r\n            <span><b>Câu {currentQuestionIndex + 1}:</b> {currentQuestion.questionContent}</span>\r\n            <Map\r\n                collection={choices.values}\r\n                iteratee={(choice: Choice, index: number) =>\r\n                    <div\r\n                        key={index}\r\n                        className={`${displayAnswer(choice.value)} custom-control custom-checkbox`}\r\n                    >\r\n                        <input\r\n                            id={`answer-${index}`}\r\n                            type='checkbox'\r\n                            className='custom-control-input'\r\n                            onChange={(e) => selectCheckBox(e, choice)}\r\n                            disabled={isNextQuestion}\r\n                        />\r\n                        <label\r\n                            className='custom-control-label'\r\n                            htmlFor={`answer-${index}`}\r\n                        >\r\n                            {choice.value}\r\n                        </label>\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        currentQuestionIndex: state.quizTest.currentQuestionIndex,\r\n        selectedAnswers: state.quizTest.selectedAnswers,\r\n        questions: state.quizTest.questions,\r\n        currentQuestion: state.quizTest.currentQuestion,\r\n        isRightAnswer: state.quizTest.isRightAnswer,\r\n        isNextQuestion: state.quizTest.isNextQuestion,\r\n        choices: state.quizTest.choices,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    shuffleQuestions,\r\n    getQuestionByIndex,\r\n    deselectChoice,\r\n    selectChoice,\r\n    confirmAnswer,\r\n    nextQuestion,\r\n    resetWhenGoBack,\r\n    generateChoices,\r\n    doTestingPartAgain,\r\n};\r\n\r\nconst CurrentQuestion = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(_CurrentQuestion);\r\nexport default withRouter(\r\n    connect(mapStateToProps, mapDispatchToProps)(QuizTest)\r\n);","import IAction from '../interfaces/IAction';\r\nimport { FETCH_TOPICS_SUCCESS, FETCH_ENGLISH_VOCABULARIES_SUCCESS } from '../actions/ApiActions';\r\n\r\nconst initialState = {\r\n    topics: [],\r\n    questions: [],\r\n    numberQuestionsPerAPart: 20,\r\n    englishVocabularies: [],\r\n    numberVocabulariesPerAPart: 20,\r\n}\r\n\r\nexport default function ApiReducer(state = initialState, action: IAction) {\r\n    const { type, payload } = action;\r\n    \r\n    switch(type) {\r\n        case FETCH_TOPICS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                topics: payload.topics\r\n            }\r\n        case FETCH_ENGLISH_VOCABULARIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                englishVocabularies: payload.vocabularies\r\n            }\r\n        default: return state;\r\n    }\r\n}","export default class QuizPart<T> {\r\n    quizPartName: string;\r\n    questions: T[];\r\n\r\n    constructor({\r\n        quizPartName,\r\n        questions\r\n    }: {\r\n        quizPartName: string,\r\n        questions: T[]\r\n    }) {\r\n        this.quizPartName = quizPartName;\r\n        this.questions = questions;\r\n    }\r\n}","import _ from 'lodash';\r\nimport EnglishVocabulary from '../models/EnglishVocabulary';\r\nimport IAction from '../interfaces/IAction';\r\nimport QuizPart from '../view-models/QuizPart';\r\nimport Topic from '../models/Topic';\r\nimport { GET_TOPIC, SPLIT_QUESTIONS_INTO_PARTS } from '../actions/QuizIntroduceActions';\r\nimport { GET_VOCABULARIES_BY_TOPIC_ID } from '../actions/EnglishVocaIntroduceActions';\r\n\r\nconst initialState = {\r\n    topic: null,\r\n    vocabularies: [],\r\n    parts: []\r\n};\r\n\r\nexport default function EnglishVocaIntroduceReducer(state = initialState, action: IAction) {\r\n    const { type, payload } = action;\r\n    \r\n    switch(type) {\r\n        case GET_TOPIC:\r\n            return {\r\n                ...state,\r\n                topic: payload.topics.find((topic: Topic) => topic.topicId === payload.topicId)\r\n            }\r\n        case GET_VOCABULARIES_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                vocabularies: payload.vocabularies.filter((voca: EnglishVocabulary) => voca.topicId === payload.topicId)\r\n            };\r\n        case SPLIT_QUESTIONS_INTO_PARTS:\r\n            return {\r\n                ...state,\r\n                parts: _.map(_.chunk(payload.questions, payload.numberQuestionsPerAPart),\r\n                        (newQuestions: EnglishVocabulary[], index: number) => new QuizPart({ quizPartName: `Phần ${index + 1}`, questions: newQuestions })),\r\n            };\r\n        default: return state;\r\n    }\r\n}","import Choice from './Choice';\r\n\r\nexport default class RadioChoices {\r\n    questionContent: string;\r\n    values: Choice[] = [];\r\n    selectedChoice?: Choice;\r\n\r\n    constructor({\r\n        values,\r\n        selectedChoice,\r\n        questionContent,\r\n    }: {\r\n        values: Choice[],\r\n        selectedChoice?: Choice,\r\n        questionContent: string,\r\n    }) {\r\n        this.values = values || [];\r\n        this.selectedChoice = selectedChoice;\r\n        this.questionContent = questionContent || '';\r\n    }\r\n}","import _ from 'lodash';\r\nimport Choice from '../view-models/Choice';\r\nimport IAction from '../interfaces/IAction';\r\nimport RadioChoices from '../view-models/RadioChoices';\r\nimport {\r\n    CONFIRM_ANSWER,\r\n    DO_TESTING_PART_AGAIN,\r\n    GENERATE_CHOICES,\r\n    GET_QUESTION_BY_INDEX,\r\n    NEXT_QUESTION,\r\n    RESET_WHEN_GO_BACK,\r\n    SELECT_CHOICE,\r\n    SHUFFLE_QUESTIONS\r\n    } from '../actions/SharedActions';\r\nimport { SET_IS_MEANING_QUESTION } from '../actions/EnglisVocaTestActions';\r\n\r\nconst initialState = {\r\n    vocabularies: [],\r\n    currentVocaIndex: 0,\r\n    currentVoca: null,\r\n    isNextQuestion: false,\r\n    isRightAnswer: null,\r\n    isMeaningQuestion: null,\r\n    choices: new RadioChoices({\r\n        questionContent: '',\r\n        values: []\r\n    }),\r\n};\r\n\r\nexport default function EnglishVocaTestReducer(state = initialState, action: IAction) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case GET_QUESTION_BY_INDEX:\r\n            return {\r\n                ...state,\r\n                currentVoca: state.vocabularies.find((voca, index) => index === payload.index)\r\n            }\r\n        case SHUFFLE_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                vocabularies: _.shuffle(payload.questions)\r\n            }\r\n        case GENERATE_CHOICES:\r\n            return {\r\n                ...state,\r\n                choices: new RadioChoices({\r\n                    values: _.shuffle(payload.choices)\r\n                        .map((choice: Choice, index: number) =>\r\n                            new Choice({\r\n                                index,\r\n                                value: choice.value,\r\n                                isRightAnswer: choice.isRightAnswer\r\n                            })\r\n                        ),\r\n                    questionContent: payload.questionContent,\r\n                })\r\n            }\r\n        case SELECT_CHOICE:\r\n            return {\r\n                ...state,\r\n                choices: new RadioChoices({\r\n                    values: state.choices.values,\r\n                    questionContent: state.choices.questionContent,\r\n                    selectedChoice: payload.choice\r\n                })\r\n            }\r\n        case CONFIRM_ANSWER:\r\n            return {\r\n                ...state,\r\n                isRightAnswer: payload.isRightAnswer,\r\n                isNextQuestion: true,\r\n            }\r\n        case NEXT_QUESTION:\r\n            return {\r\n                ...state,\r\n                currentVocaIndex: state.currentVocaIndex + 1,\r\n                isRightAnswer: null,\r\n                isNextQuestion: false,\r\n                isMeaningQuestion: null,\r\n            }\r\n        case DO_TESTING_PART_AGAIN:\r\n            return {\r\n                ...state,\r\n                currentVocaIndex: 0,\r\n                currentVoca: null,\r\n                isNextQuestion: false,\r\n                isRightAnswer: null,\r\n                isMeaningQuestion: null,\r\n                choices: new RadioChoices({\r\n                    questionContent: '',\r\n                    values: []\r\n                }),\r\n            }\r\n        case SET_IS_MEANING_QUESTION:\r\n            return {\r\n                ...state,\r\n                isMeaningQuestion: payload.isMeaningQuestion\r\n            }\r\n        case RESET_WHEN_GO_BACK: return initialState;\r\n        default: return state;\r\n    }\r\n}","import _ from 'lodash';\r\nimport IAction from '../interfaces/IAction';\r\nimport Topic from '../models/Topic';\r\nimport {\r\n    GET_ENGLISH_PARENT_TOPICS,\r\n    GET_NOT_ENGLISH_PARENT_TOPICS,\r\n    GET_PARENT_TOPICS\r\n} from '../actions/HomeActions';\r\n\r\nconst initialState = {\r\n    parentTopics: [],\r\n    englishParentTopics: [],\r\n    notEnglishParentTopics: []\r\n};\r\n\r\nexport default function HomeReducer(state = initialState, action: IAction) {\r\n    const { type, payload } = action;\r\n    \r\n    switch(type) {\r\n        case GET_PARENT_TOPICS:\r\n            return {\r\n                ...state,\r\n                parentTopics: payload.topics.filter((topic: Topic) => _.isNil(topic.parentTopicId))\r\n            }\r\n        case GET_ENGLISH_PARENT_TOPICS:\r\n            return {\r\n                ...state,\r\n                englishParentTopics: state.parentTopics.filter((topic: Topic) => topic.isEnglishVocaTopic)\r\n            }\r\n        case GET_NOT_ENGLISH_PARENT_TOPICS:\r\n            return {\r\n                ...state,\r\n                notEnglishParentTopics: state.parentTopics.filter((topic: Topic) => !topic.isEnglishVocaTopic)\r\n            }\r\n        default: return state;\r\n    }\r\n}","import _ from 'lodash';\r\nimport IAction from '../interfaces/IAction';\r\nimport Question from '../models/Question';\r\nimport QuizPart from '../view-models/QuizPart';\r\nimport Topic from '../models/Topic';\r\nimport { GET_QUESTIONS_BY_TOPIC_ID, GET_TOPIC, SPLIT_QUESTIONS_INTO_PARTS } from '../actions/QuizIntroduceActions';\r\n\r\nconst initialState = {\r\n    topic: null,\r\n    questions: [],\r\n    parts: []\r\n};\r\n\r\nexport default function QuizIntroduceReducer(state = initialState, action: IAction) {\r\n    const { payload, type } = action;\r\n    \r\n    switch(type) {\r\n        case GET_TOPIC:\r\n            return {\r\n                ...state,\r\n                topic: payload.topics.find((topic: Topic) => topic.topicId === payload.topicId)\r\n            }\r\n        case GET_QUESTIONS_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                questions: payload.questions.filter((question: Question) => question.topicId === payload.topicId)\r\n            }\r\n        case SPLIT_QUESTIONS_INTO_PARTS:\r\n            return {\r\n                ...state,\r\n                parts: _.map(_.chunk(payload.questions, payload.numberQuestionsPerAPart),\r\n                        (newQuestions: Question[], index: number) => new QuizPart({ quizPartName: `Phần ${index + 1}`, questions: newQuestions })),\r\n            }\r\n        default: return state;\r\n    }\r\n}","import _ from 'lodash';\r\nimport Choice from './Choice';\r\n\r\nexport default class CheckBoxChoices {\r\n    questionContent: string;\r\n    values: Choice[] = [];\r\n    selectedChoices: Choice[] = [];\r\n\r\n    constructor({\r\n        values,\r\n        selectedChoices,\r\n        questionContent,\r\n    }: {\r\n        values: Choice[],\r\n        selectedChoices?: Choice[],\r\n        questionContent: string,\r\n    }) {\r\n        this.values = _.isNil(values) ? [] : values;\r\n        this.selectedChoices = _.isNil(selectedChoices) ? [] : selectedChoices;\r\n        this.questionContent = _.isNil(questionContent) ? '' : questionContent;\r\n    }\r\n\r\n    isChoiceExists(choice: Choice) {\r\n        if (_.isNil(choice))\r\n            return false;\r\n\r\n        return !_.isNil(this.selectedChoices.find((c: Choice) => c.index === choice.index));\r\n    }\r\n}","import _ from 'lodash';\r\nimport CheckBoxChoices from '../view-models/CheckBoxChoices';\r\nimport Choice from '../view-models/Choice';\r\nimport IAction from '../interfaces/IAction';\r\nimport {\r\n    CONFIRM_ANSWER,\r\n    DESELECT_CHOICE,\r\n    DO_TESTING_PART_AGAIN,\r\n    GENERATE_CHOICES,\r\n    GET_QUESTION_BY_INDEX,\r\n    NEXT_QUESTION,\r\n    RESET_WHEN_GO_BACK,\r\n    SELECT_CHOICE,\r\n    SHUFFLE_QUESTIONS\r\n    } from '../actions/SharedActions';\r\n\r\nconst initialState = {\r\n    questions: [],\r\n    currentQuestionIndex: 0,\r\n    currentQuestion: null,\r\n    isNextQuestion: false,\r\n    isRightAnswer: null,\r\n    choices: new CheckBoxChoices({\r\n        questionContent: '',\r\n        values: []\r\n    })\r\n};\r\n\r\nexport default function QuizTestReducer(state = initialState, action: IAction) {\r\n    const { type, payload } = action;\r\n\r\n    switch(type) {\r\n        case SHUFFLE_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                questions: _.shuffle(payload.questions)\r\n            };\r\n        case GET_QUESTION_BY_INDEX:\r\n            return {\r\n                ...state,\r\n                currentQuestion: state.questions.find((question, index) => index === payload.index)\r\n            };\r\n        case SELECT_CHOICE:\r\n            return {\r\n                ...state,\r\n                choices:\r\n                    (_.isNil(payload.choice) || state.choices.isChoiceExists(payload.choice))\r\n                    ? state.choices\r\n                    : new CheckBoxChoices({\r\n                        values: state.choices.values,\r\n                        questionContent: state.choices.questionContent,\r\n                        selectedChoices: [...state.choices.selectedChoices, payload.choice]\r\n                    })\r\n            }\r\n        case DESELECT_CHOICE:\r\n            return {\r\n                ...state,\r\n                choices:\r\n                    (_.isNil(payload.choice) || !state.choices.isChoiceExists(payload.choice))\r\n                    ? state.choices\r\n                    : new CheckBoxChoices({\r\n                        values: state.choices.values,\r\n                        questionContent: state.choices.questionContent,\r\n                        selectedChoices: state.choices.selectedChoices.filter((choice: Choice) => choice.index !== payload.choice.index)\r\n                    })\r\n            };\r\n        case CONFIRM_ANSWER:\r\n            return {\r\n                ...state,\r\n                isRightAnswer: payload.isRightAnswer,\r\n                isNextQuestion: true,\r\n            };\r\n        case NEXT_QUESTION:\r\n            return {\r\n                ...state,\r\n                currentQuestionIndex: state.currentQuestionIndex + 1,\r\n                isRightAnswer: null,\r\n                isNextQuestion: false,\r\n                choices: new CheckBoxChoices({\r\n                    questionContent: '',\r\n                    values: []\r\n                })\r\n            };\r\n        case GENERATE_CHOICES:\r\n            return {\r\n                ...state,\r\n                choices: new CheckBoxChoices({\r\n                    values: _.shuffle(payload.choices)\r\n                        .map((choice: Choice, index: number) =>\r\n                        new Choice({\r\n                            index,\r\n                            value: choice.value,\r\n                            isRightAnswer: choice.isRightAnswer\r\n                        })\r\n                    ),\r\n                    questionContent: payload.questionContent,\r\n                })\r\n            }\r\n        case DO_TESTING_PART_AGAIN:\r\n            return {\r\n                ...state,\r\n                currentQuestionIndex: 0,\r\n                currentQuestion: null,\r\n                isNextQuestion: false,\r\n                isRightAnswer: null,\r\n                choices: new CheckBoxChoices({\r\n                    questionContent: '',\r\n                    values: []\r\n                })\r\n            }\r\n        case RESET_WHEN_GO_BACK: return initialState;\r\n        default: return state;\r\n    }\r\n}","import ApiReducer from './ApiReducer';\r\nimport EnglishVocaIntroduceReducer from './EnglishVocaIntroduceReducer';\r\nimport EnglishVocaTestReducer from './EnglishVocaTestReducer';\r\nimport HomeReducer from './HomeReducer';\r\nimport QuizIntroduceReducer from './QuizIntroduceReducer';\r\nimport QuizTestReducer from './QuizTestReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst reducers = combineReducers({\r\n    api: ApiReducer,\r\n    home: HomeReducer,\r\n    quizIntroduce: QuizIntroduceReducer,\r\n    quizTest: QuizTestReducer,\r\n    englishVocaIntroduce: EnglishVocaIntroduceReducer,\r\n    englishVocaTest: EnglishVocaTestReducer\r\n});\r\n\r\nexport default reducers;","import { createStore, applyMiddleware } from 'redux';\r\nimport reducers from '../reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","import EnglishVocaIntroduce from './components/EnglishVocaIntroduce/EnglishVocaIntroduce';\nimport EnglishVocaTest from './components/EnglishVocaTest/EnglishVocaTest';\nimport Home from './components/Home/Home';\nimport QuizIntroduce from './components/QuizIntroduce/QuizIntroduce';\nimport QuizTest from './components/QuizTest/QuizTest';\nimport React from 'react';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Switch>\n                <Route path='/' exact>\n                    <Home />\n                </Route>\n                <Route path='/quiz-introduce'>\n                    <QuizIntroduce />\n                </Route>\n                <Route path='/quiz-test'>\n                    <QuizTest />\n                </Route>\n                <Route path='/english-voca-introduce'>\n                    <EnglishVocaIntroduce />\n                </Route>\n                <Route path='/english-voca-test'>\n                    <EnglishVocaTest />\n                </Route>\n            </Switch>\n        </Provider>\n    );\n}\n\nexport default App;","import * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}